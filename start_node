#!/bin/bash

TMPDIR="/tmp/docker-home"
SRC="$( (cd $(dirname "$0") && pwd))"

# The script must be running in root
if [ "$(whoami)" != "root" ]; then
	echo "Please run in root"
	exit 0
fi

# Select docker environment
if [ "$2" == "" ]; then
	echo "Usage:"
	echo "$0 environment nodename"
	echo "ex: $0 private/public homeassistant"
	exit 0
fi

if [ ! -e "$SRC/$2" ]; then
	echo "$2 node not exist"
	exit 1
fi

# Export nodes variables
set -a
source ./$1.env $1
set +a


export DH_NODE="$2"

# Root remove protection
if [ "$(realpath $DH_DSTDOCKER)" = "/" ]; then
	echo "Cannot store docker images in / folder"
	exit 1
fi

# Create DH_DSTDOCKER Directory
mkdir -p $DH_DSTDOCKER

# Copy node configurations to temporary file (overide files layers)
TPLDEST="${TMPDIR}/${DH_NODE}/${DH_ENV}"
mkdir -p "${TPLDEST}"
COUNTER=0
for path_env in ${DH_PATHENV[*]}; do
	if [ $COUNTER -eq 0 ]; then
		DELETE="--delete"
	else
		DELETE=""
	fi

	if [ -d "$path_env/${DH_NODE}" ]; then
		rsync -avr $DELETE "$path_env/${DH_NODE}/" "${TPLDEST}"
	fi
	COUNTER=$((COUNTER+1))
done

# Replace all variables
for filename in $(find "${TPLDEST}" -type f); do
	envsubst <"$filename" >"${filename}.bak"
	mv "${filename}.bak" "${filename}"
done

# Sync configurations to docker destination
mkdir -p "${DH_DSTDOCKER}/${DH_NODE}/${DH_ENV}"
rsync -avr --ignore-existing "${TPLDEST}/" "${DH_DSTDOCKER}/${DH_NODE}/${DH_ENV}/"

# Launching containers
DCOMPOSE="docker-compose -p ${DH_ENV}-${DH_NODE} -f ${DH_DSTDOCKER}/${DH_NODE}/${DH_ENV}/docker-compose.yml"
COUNT=$($DCOMPOSE ps -q | wc -l)
if [ "$COUNT" == "0" ]; then
	$DCOMPOSE down
fi

# $DCOMPOSE config
#$DCOMPOSE up --build zoneminder
$DCOMPOSE build

# $DCOMPOSE create
$DCOMPOSE up -d
